/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol;
//import java.util.LinkedList;

//------> Codigo para el parser,variables, metodos
parser code
{:


    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!Error Sintactico Recuperado!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }
:}

//------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales
terminal PLUS, MINUS, TIMES, DIV, EQ;
terminal PARA, PARC, PUNTOCOMA, LBRACE, RBRACE, DBLPUNTO;
terminal IF, ELSE, SWITCH, FOR, BREAK, PRINT, WHILE, CLASS;
terminal String LETTER, STRGN, IDNT;
terminal Integer DOUBL, NUM;
terminal INTG, STRG, DOBL, CLSIDNT;




//------> declaracion de no terminales
non terminal Declaration, VaribleDecl, FunctionDecl, ClassDecl, TypeIdnt;
non terminal INICIO, Expr, Bin_op, Stmt, Oper, IfStmt, IfElseStmt, PrintStmt, PosbBlank;

//----> precedencia de menor a mayor
precedence left PLUS, MINUS;
precedence left TIMES, DIV;

start with INICIO;


/*--------------- 3ra Area: Reglas Semanticas -----------------------*/
INICIO::= Expr;


Declaration::= VaribleDecl | ClassDecl| FunctionDecl;

ClassDecl::=  CLASS CLSIDNT DBLPUNTO
            | CLASS CLSIDNT DBLPUNTO ClassDecl;


VariableDecl::= TypeIdnt IDNT EQ PUNTOCOMA;

TypeIdnt::=   INTG
            | STRG
            | DOBL;
















/*
Stmt::=   IfStmt
        | PrintStmt;

Bin_op::=   PLUS
          | MINUS
          | TIMES
          | DIV;

Expr::=   Stmt
        | Oper
        | LETTER
        | STRGN
        | MINUS Expr
        | PARA Expr PARC;

PosbBlank::=
            | Expr;

Oper::=   NUM
        | DOUBL
        | NUM Bin_op NUM;

IfStmt::= IF PARA Expr PARC DBLPUNTO PosbBlank
        | IF PARA error
            {: System.out.println("----Error por Expresion faltante"); :}
            PARC DBLPUNTO PosbBlank;


PrintStmt::=  PRINT PARA PosbBlank PARC PUNTOCOMA
            | PRINT PARA PosbBlank PARC error:e {:System.out.println("Falta Puntocoma");:};

*/